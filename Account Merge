//{ Driver Code Starts
//Initial Template for C++
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++
 class DisJoinSet{
     vector<int>rank,parent,size;
     public:
        DisJoinSet(int n){
            rank.resize(n+1,0);
            parent.resize(n+1,0);
            size.resize(n+1,0);
              for(int i =0 ;i<=n;i++){
                 parent[i]=i;
                 size[i]=1;
              }
        }
        // find prent funcation and path comparsion
         int findUpar(int node){
            if(node==parent[node])
              return node;
              // path comparision
            return parent[node]=findUpar(parent[node]);
         }
       // unionmake funcation
         void  UnionByRnak(int u , int v)
             {
              int ulp_u = findUpar(u);
              int ulp_v = findUpar(v);
               if(ulp_u==ulp_v) return ;
               if(rank[ulp_u]<rank[ulp_v]){
                    parent[ulp_u]=ulp_v;
               }
               else if(rank[ulp_u]>rank[ulp_v]){
                parent[ulp_v]=ulp_u;
               }
               else{
                parent[ulp_v]=ulp_u;
                rank[ulp_u]++;
             }
         }
          void  UnionBySize(int u , int v)
             {
              int ulp_u = findUpar(u);
              int ulp_v = findUpar(v);
               if(ulp_u==ulp_v) return ;
                
                 if(size[ulp_u]<size[ulp_v]){
                     parent[ulp_u]=ulp_v;
                      size[ulp_v]+=size[ulp_u];
                 }
                 else{
                    parent[ulp_v]=ulp_u;
                      size[ulp_u]+=size[ulp_v];
                 }

             }
 };
class Solution{
  public:
    vector<vector<string>> accountsMerge(vector<vector<string>> &accounts) {
    
         int n = accounts.size();
         DisJoinSet ds(n);
         unordered_map<string,int>mpp;
         for(int i =0 ;i<n;i++){
             for(int j =1;j<accounts[i].size();j++){
                 string mail =accounts[i][j];
                 if(mpp.find(mail)==mpp.end()){
                     mpp[mail]=i;
                 }else{
                     ds.UnionBySize(i,mpp[mail]);
                 }
             }
         }
         
         
         
         vector<string>margeMail[n];
         for(auto it : mpp){
             string mail = it.first;
             int node = ds.findUpar(it.second);
             margeMail[node].push_back(mail);
         }
         
         
         vector<vector<string>>ans;
         
         
       for(int i =0 ;i<n;i++){
           if(margeMail[i].size()==0)continue;
           sort(margeMail[i].begin(),margeMail[i].end());
           vector<string>temp;
           temp.push_back(accounts[i][0]);
           for(auto it :margeMail[i]){
               temp.push_back(it);
               
           }
           ans.push_back(temp);
       }
       return ans;
    }
};


//{ Driver Code Starts.
int main()
{
  int t;
  cin >> t;
  while (t--)
  {
    int n;
    cin >> n;
    vector<vector<string>> accounts;

    for (int i = 0; i < n; i++)
    {
      vector<string> temp;
      int x;
      cin >> x;

      for (int j = 0; j < x; j++)
      {
        string s1;
        cin >> s1;
        temp.push_back(s1);
      }
      accounts.push_back(temp);
    }

    Solution obj;
    vector<vector<string>> res = obj.accountsMerge(accounts);
    sort(res.begin(), res.end());
    cout << "[";
    for (int i = 0; i < res.size(); ++i)
    {
      cout << "[";
      for (int j = 0; j < res[i].size(); j++)
      {
        if (j != res[i].size() - 1)
          cout << res[i][j] << ","
               << " ";
        else
          cout << res[i][j];
      }
      if (i != res.size() - 1)
        cout << "], " << endl;
      else
        cout << "]";
    }
    cout << "]"
         << endl;
  }
}
// } Driver Code Ends
