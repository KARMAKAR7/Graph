//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++
 class DisJoinSet{
     vector<int>rank,parent,size;
     public:
        DisJoinSet(int n){
            rank.resize(n+1,0);
            parent.resize(n+1,0);
            size.resize(n+1,0);
              for(int i =0 ;i<=n;i++){
                 parent[i]=i;
                 size[i]=1;
              }
        }
        // find prent funcation and path comparsion
         int findUpar(int node){
            if(node==parent[node])
              return node;
              // path comparision
            return parent[node]=findUpar(parent[node]);
         }
       // unionmake funcation
         void  UnionByRnak(int u , int v)
             {
              int ulp_u = findUpar(u);
              int ulp_v = findUpar(v);
               if(ulp_u==ulp_v) return ;
               if(rank[ulp_u]<rank[ulp_v]){
                    parent[ulp_u]=ulp_v;
               }
               else if(rank[ulp_u]>rank[ulp_v]){
                parent[ulp_v]=ulp_u;
               }
               else{
                parent[ulp_v]=ulp_u;
                rank[ulp_u]++;
             }
         }
          void  UnionBySize(int u , int v)
             {
              int ulp_u = findUpar(u);
              int ulp_v = findUpar(v);
               if(ulp_u==ulp_v) return ;
                
                 if(size[ulp_u]<size[ulp_v]){
                     parent[ulp_u]=ulp_v;
                      size[ulp_v]+=size[ulp_u];
                 }
                 else{
                    parent[ulp_v]=ulp_u;
                      size[ulp_u]+=size[ulp_v];
                 }

             }
 };
class Solution {
    private:
    bool isVaild(int adjr , int adjc , int n , int m){
        return adjr>=0 && adjr<n && adjc>=0 && adjc<m ;
    }
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
         DisJoinSet ds(n*m);
         int vis[n][m];
         memset(vis,0,sizeof vis);
         int cnt = 0;
         vector<int>ans;
         for(auto it:operators){
             int row = it[0];
             int col = it[1];
             if(vis[row][col]==1){
                 ans.push_back(cnt);
                 continue;
             }
             vis[row][col]=1;
             cnt++;
             
             int dr[]={-1,0,+1,0};
             int dc[]={0,+1,0,-1};
             
             
             for(int i =0;i<4;i++){
                 int adjr = row+dr[i];
                 int adjc = col+dc[i];
                 
                 if(isVaild(adjr,adjc,n,m)){
                     if(vis[adjr][adjc]==1){
                         int nodeNo = row*m+col;
                         int adjNodeNo = adjr*m+adjc;
                         if(ds.findUpar(nodeNo)!=ds.findUpar(adjNodeNo)){
                             cnt--;
                             ds.UnionBySize(nodeNo,adjNodeNo);
                         }
                     }
                 }
                
             }
              ans.push_back(cnt);
         }
         
         
         return ans;
    }
};


//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n,m,k; cin>>n>>m>>k;
        vector<vector<int>> a;
        
        for(int i=0; i<k; i++){
            vector<int> temp;
            for(int j=0; j<2; j++){
                int x; cin>>x;
                temp.push_back(x);
            }
            a.push_back(temp);
        }
    
        Solution obj;
        vector<int> res = obj.numOfIslands(n,m,a);
        
        for(auto x : res)cout<<x<<" ";
        cout<<"\n";
    }
}

// } Driver Code Ends
